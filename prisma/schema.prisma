generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Trip {
  id               String   @id @default(uuid())
  serviceType      String
  routeName        String
  routeOrigin      String
  routeDestination String
  departureDate    DateTime
  departureTime    String
  totalSeats       Int
  availableSeats   Int
  occupiedSeats    String?
  fare             Int
  durationMinutes  Int
  boardingPoint    String
  droppingPoint    String
  promoActive      Boolean  @default(false)
  hasDeparted      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  bookings       Booking[] @relation("TripBooking")
  returnBookings Booking[] @relation("ReturnTripBooking")
}

model Promotion {
  id         String   @id @default(uuid())
  code       String   @unique
  discount   Int // Percentage or fixed amount
  type       String   @default("percentage") // percentage or fixed
  expiryDate DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      String   @default("admin") // admin, super_admin
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id           String  @id @default(uuid())
  tripId       String
  trip         Trip    @relation("TripBooking", fields: [tripId], references: [id])
  returnTripId String?
  returnTrip   Trip?   @relation("ReturnTripBooking", fields: [returnTripId], references: [id])

  // Passenger details
  userName  String
  userEmail String
  userPhone String?

  // Booking details
  seats      String // JSON array of seat numbers
  seatCount  Int // Number of seats booked
  totalPrice Int

  // Journey details
  boardingPoint       String
  droppingPoint       String
  returnBoardingPoint String?
  returnDroppingPoint String?

  // Payment and status
  orderId       String @unique
  paymentStatus String @default("pending") // pending, paid, failed, refunded
  bookingStatus String @default("confirmed") // confirmed, cancelled

  // Promotions
  promoCode      String?
  discountAmount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

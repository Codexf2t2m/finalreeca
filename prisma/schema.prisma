// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
}

model Trip {
  id               String   @id @default(uuid())
  serviceType      String
  routeName        String
  routeOrigin      String
  routeDestination String
  departureDate    DateTime
  departureTime    String
  totalSeats       Int
  availableSeats   Int
  occupiedSeats    String?
  fare             Int
  durationMinutes  Int
  boardingPoint    String
  droppingPoint    String
  promoActive      Boolean  @default(false)
  hasDeparted      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  bookings       Booking[] @relation("TripBooking")
  returnBookings Booking[] @relation("ReturnTripBooking")
}

model Booking {
  id                  String    @id @default(uuid())
  tripId              String
  trip                Trip      @relation("TripBooking", fields: [tripId], references: [id])
  returnTripId        String?
  returnTrip          Trip?     @relation("ReturnTripBooking", fields: [returnTripId], references: [id])
  userName            String
  userEmail           String
  userPhone           String?
  seats               String
  returnSeats         String?
  seatCount           Int
  totalPrice          Float
  paymentMode         String
  boardingPoint       String
  droppingPoint       String
  returnBoardingPoint String?
  returnDroppingPoint String?
  orderId             String    @unique
  transactionToken    String?
  paymentStatus       String    @default("pending")
  bookingStatus       String    @default("confirmed")
  promoCode           String?
  discountAmount      Float     @default(0)
  competitorInfo      Json?
  scanned             Boolean   @default(false)
  lastScanned         DateTime?
  scannerId           String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  contactIdNumber     String
  emergencyContactName   String?
  emergencyContactPhone  String?
  addons                 Json? 

  passengers Passenger[]

  agentId    String?  // nullable for normal bookings
  agent      Agent?   @relation(fields: [agentId], references: [id])

  consultantId String?
  consultant   Consultant? @relation(fields: [consultantId], references: [id])
}

model Passenger {
  id         String   @id @default(uuid())
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId  String
  firstName  String
  lastName   String
  seatNumber String
  title      String
  isReturn   Boolean  @default(false)
  boarded    Boolean  @default(false)
  hasInfant  Boolean  @default(false)
  infantBirthdate        String?
  infantName             String?
  infantPassportNumber   String?
  birthdate String?                 // <-- Add this for child
  passportNumber String?            // <-- Add this for adult/child
  type String?                      // <-- Add this for adult/child
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Inquiry {
  id             String   @id @default(uuid())
  companyName    String
  contactPerson  String
  email          String
  phone          String
  passengers     Int
  date           String
  time           String
  origin         String
  destination    String
  returnDate     String   // <-- Add this line
  specialRequests String?
  status         String   @default("pending")
  requestedAt    DateTime @default(now())
}

model Agent {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  organization String
  mobile    String
  idNumber  String
  password  String   // hashed
  createdAt DateTime @default(now())
  bookings  Booking[]
  approved  Boolean  @default(false)
  suspended Boolean  @default(false)
  suspensionDate   DateTime?
}

model Consultant {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  organization String
  mobile    String
  idNumber  String
  password  String   // hashed
  createdAt DateTime @default(now())
  bookings  Booking[]
  approved  Boolean  @default(false)
  suspended Boolean  @default(false)
  suspensionDate   DateTime?
}

model FareSetting {
  id        String   @id @default(uuid())
  type      String   @unique // "infant" or "child"
  price     Int
  updatedAt DateTime @updatedAt
}

model Policy {
  id        String   @id @default(uuid())
  content   String
  updatedAt DateTime @updatedAt
}